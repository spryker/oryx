name: Test Workflow

on:
  # Triggers the workflow on push events
  push:
    branches:
      - development
  # Triggers the workflow on pull request events
  pull_request:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GITHUB_REF: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref }}
  IS_DEV: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/development' }}

jobs:
  test-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.GITHUB_REF }}
          fetch-depth: 0
          submodules: recursive
      - uses: ./.github/actions/init
      - name: Format
        run: npx nx format:check --verbose
  test-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.GITHUB_REF }}
          fetch-depth: 0
          submodules: recursive
      - uses: ./.github/actions/init
      - name: Lint
        uses: ./.github/actions/run-optimal
        with:
          cmd: npx nx run-many --target=lint --all --parallel=2
          affectedCmd: npx nx affected:lint
          isDev: ${{ env.IS_DEV }}
  test-stylelint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.GITHUB_REF }}
          fetch-depth: 0
          submodules: recursive
      - uses: ./.github/actions/init
      - name: Style Lint All
        uses: ./.github/actions/run-optimal
        with:
          cmd: npx nx run-many --target=stylelint --all --parallel=2
          affectedCmd: npx nx affected --target=stylelint
          isDev: ${{ env.IS_DEV }}
  test-tsconfig:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.GITHUB_REF }}
          fetch-depth: 0
          submodules: recursive
      - uses: ./.github/actions/init
      - name: TsConfig Paths
        uses: ./.github/actions/run-optimal
        with:
          cmd: npx nx run-many --target=paths --all --parallel=2
          affectedCmd: npx nx affected --target=paths
          isDev: ${{ env.IS_DEV }}
  test-unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.GITHUB_REF }}
          fetch-depth: 0
          submodules: recursive
      - uses: ./.github/actions/init
      - name: Unit Tests
        uses: ./.github/actions/run-optimal
        with:
          cmd: |
            npx nx run-many --target=test --all --parallel=2
            node tools/coverage-reports/create-merged-layer-coverage-report.js libs/base
            node tools/coverage-reports/create-merged-layer-coverage-report.js libs/domain
            node tools/coverage-reports/create-merged-layer-coverage-report.js libs/platform
          affectedCmd: npx nx affected:test
          isDev: ${{ env.IS_DEV }}
  test-visual-pr:
    if: ${{ github.actor != 'dependabot[bot]' && github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          submodules: recursive
      - uses: ./.github/actions/init
      - name: Visual Regression Tests
        env:
          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          CHROMATIC_SHA: ${{ github.event.pull_request.head.sha }}
          CHROMATIC_BRANCH: ${{ github.event.pull_request.head.ref }}
        run: npx nx affected --target=visual-regression-pr
  test-visual-dev:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.GITHUB_REF }}
          fetch-depth: 0
          submodules: recursive
      - uses: ./.github/actions/init
      - name: Visual Regression Tests
        env:
          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          CHROMATIC_SHA: ${{ github.event.after }}
          CHROMATIC_BRANCH: development
        run: npx nx run storybook:visual-regression-branch
  test-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.GITHUB_REF }}
          fetch-depth: 0
          submodules: true
      - uses: ./.github/actions/init
      - name: Build
        uses: ./.github/actions/run-optimal
        with:
          cmd: npx nx run-many --target=build --all --parallel=2
          affectedCmd: npx nx affected:build
          isDev: ${{ env.IS_DEV }}
